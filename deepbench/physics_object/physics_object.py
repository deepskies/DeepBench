from abc import ABC, abstractclassmethod, abstractmethod
from typing import Union, List, Tuple
from scipy import ndimage
import numpy.random as rand
import numpy as np


class PhysicsObject(ABC):
    def __init__(self, noise_level: float) -> None:
        """Abstract method for a genetic physics sim object

        Args:
            noise_level (float): Level of noise to be generated by the "create_noise" method
        """
        self._noise_level = noise_level

    @abstractmethod
    def create_object(self) -> np.array:
        """
        Creates the object
        Code which is called to make the object during execution
        """
        raise NotImplementedError()

    def create_noise(
        self, seed: int = 42, n_steps: Union[int, Tuple[int, int]] = 10
    ) -> np.array:
        """
        Create guassian noise

        Args:
            seed (int, optional): random seed for generation Defaults to 42.
            n_steps (Union[int, tuple[int, int]], optional): Number of steps noise is generated for. Corresponds to the shape of the created object. Defaults to 10.

        Returns:
            np.array: Gaussian noise with the self.noise_level, of size (n_steps)
        """
        rs = rand.RandomState(seed)
        normal = rs.normal(scale=self._noise_level, size=n_steps)

        if type(n_steps) == tuple:
            return normal.reshape(normal)
        else:
            return normal

    @abstractmethod
    def displayObject(self):
        """
        Object container
        """

        raise NotImplementedError()
